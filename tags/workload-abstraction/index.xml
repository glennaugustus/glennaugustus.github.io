<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Workload Abstraction on glennaugustus.com</title><link>https://glennaugustus.com/tags/workload-abstraction/</link><description>Recent content in Workload Abstraction on glennaugustus.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 16 Jul 2015 16:24:16 +0000</lastBuildDate><atom:link href="https://glennaugustus.com/tags/workload-abstraction/index.xml" rel="self" type="application/rss+xml"/><item><title>Compute Workload Abstraction - Part 1, or One HAL of a Story</title><link>https://glennaugustus.com/post/compute-workload-abstraction-part-1-or-one-hal-of-a-story/</link><pubDate>Thu, 16 Jul 2015 16:24:16 +0000</pubDate><guid>https://glennaugustus.com/post/compute-workload-abstraction-part-1-or-one-hal-of-a-story/</guid><description>&lt;p>This is part of a series of light reading points-of-view to help foster opinion on wide ranging technology topics, and maybe throw in some education along the way. In this series we are looking to provide some insight into the increasingly topical area of workload abstraction. As always, please feel free to comment and get in touch!&lt;/p>
&lt;h1 id="how-virtualization-was-just-the-first-step">How virtualization was just the first step&lt;/h1>
&lt;p>So we all know where all this virtualization came from, right? Itâ€™s a common thought that the sole business case for virtualization was derived from the inefficient use of existing hardware resources, and of course this is part of the story. But the unsung hero of virtualization was the usage of a simplified set of resources from the hardware abstraction layer. This meant that when an application was running in a virtual machine there was a good chance that problems in the operating system were down to an exhausted resource or poor configuration, not down to a bad driver or a kernel fault. The combination of vendor testing and almost instant worldwide feedback created an ecosystem where any significant problems were either removed before release or patched before you had a chance to download it anyway! Not all problems were eradicated, but the reduction in variants at the hypervisor level created a far more standard environment in which operating systems and applications could live in relative harmony.&lt;/p></description></item></channel></rss>