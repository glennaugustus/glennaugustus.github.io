<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cloud on glennaugustus.com</title><link>https://glennaugustus.com/tags/cloud/</link><description>Recent content in Cloud on glennaugustus.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 11 May 2025 20:03:30 +0100</lastBuildDate><atom:link href="https://glennaugustus.com/tags/cloud/index.xml" rel="self" type="application/rss+xml"/><item><title>Are you telling me that you built AI Innovation... out of a DeLorean?</title><link>https://glennaugustus.com/post/ai-innovation-delorean/</link><pubDate>Sun, 11 May 2025 20:03:30 +0100</pubDate><guid>https://glennaugustus.com/post/ai-innovation-delorean/</guid><description>&lt;p>As a leap back in time for me, I wanted to start a new with an old friend, the movie quote. When I re-read my take on &lt;a href="https://glennaugustus.com/post/on-servers-serendipity-and-superman">Servers, Serendipidy and Superman&lt;/a> it seemed like a great idea to draw some parallels between the past and the future with another movie classic.&lt;/p>
&lt;p>There is a moment of cinematic history, etched into the collective consciousness of my generation (at least), where a bewildered quasi teenager uncovers an unexpected discovery. Michael J. Fox, as Marty McFly, utters a line that might just encapsulate a profound truth about innovation:&lt;/p></description></item><item><title>On servers, serendipity and Superman</title><link>https://glennaugustus.com/post/on-servers-serendipity-and-superman/</link><pubDate>Tue, 28 Feb 2017 14:00:30 +0000</pubDate><guid>https://glennaugustus.com/post/on-servers-serendipity-and-superman/</guid><description>&lt;p>There is a fantastic line in the 1978 film &lt;em>Superman&lt;/em>, penned by Mario Puzo of &lt;em>Godfather&lt;/em> fame and delivered flawlessly by the actor Gene Hackman as the perfect nemesis, Lex Luthor:&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Some people can read &lt;em>War and Peace&lt;/em> and come away thinking it’s a simple adventure story. Others can read the ingredients on a chewing gum wrapper and unlock the secrets of the universe.&amp;rdquo;&lt;/p>&lt;/blockquote>
&lt;p>The line is profound, meaningful on many levels. It is in fact ironic to consider that 561,093 words might convey something of limited value to an audience and, conversely 35 words can inform and influence an entire generation. Thought-provoking as that may be, you&amp;rsquo;re probably wondering, how does that relate to any kind of technology perspective? Let&amp;rsquo;s start with the idea that, just because there is an abundance of something, its sum may not have inherently greater value &amp;ndash; and let&amp;rsquo;s apply this consideration to lines of code.&lt;/p></description></item><item><title>Sensors and Sensibility: The Internet of Things</title><link>https://glennaugustus.com/post/sensors-and-sensibility/</link><pubDate>Thu, 02 Jun 2016 16:22:00 +0100</pubDate><guid>https://glennaugustus.com/post/sensors-and-sensibility/</guid><description>&lt;h2 id="buzzwords-of-warning">Buzzwords of warning&lt;/h2>
&lt;p>The IT industry thrives on buzzwords. It&amp;rsquo;s the industry&amp;rsquo;s fashion catwalk, and there are a large number of examples where existing products have been re-named to include and associate with a new trend. By far the biggest example in recent years is Cloud. In fact because the renaming was so rife, it generated its own buzzword: &amp;ldquo;Cloudwashing.&amp;rdquo; It would seem that any product or service that had a network connection was, in some way, a Cloud.&lt;/p></description></item><item><title>Compute Workload Abstraction - Part 2, or Virtualization is dead, long live Virtualization!</title><link>https://glennaugustus.com/post/compute-workload-abstraction-part-2-virtualization-is-dead-long-live-virtualization/</link><pubDate>Mon, 27 Jul 2015 17:40:02 +0000</pubDate><guid>https://glennaugustus.com/post/compute-workload-abstraction-part-2-virtualization-is-dead-long-live-virtualization/</guid><description>&lt;p>This is part two of a series exploring the topic of compute workload abstraction. In &lt;a href="https://glennaugustus.com/post/compute-workload-abstraction-part-1-or-one-hal-of-a-story/">part one&lt;/a> we looked at the unsung hero in virtualization, the HAL, and in this part we dive a little deeper and scratch the surface on the potential benefits for applications.&lt;/p>
&lt;h2 id="is-traditional-virtualization-dead-then">Is traditional virtualization dead, then?&lt;/h2>
&lt;p>We ended part one asking if containers are a traditional virtualization killer, and in my view they are both complementary and competitive. Sure, there will be some ground conceded, but it simply complies with the evolutionary process of what I call the &lt;em>absorption of differentiation into expectation&lt;/em>.&lt;/p></description></item><item><title>Compute Workload Abstraction - Part 1, or One HAL of a Story</title><link>https://glennaugustus.com/post/compute-workload-abstraction-part-1-or-one-hal-of-a-story/</link><pubDate>Thu, 16 Jul 2015 16:24:16 +0000</pubDate><guid>https://glennaugustus.com/post/compute-workload-abstraction-part-1-or-one-hal-of-a-story/</guid><description>&lt;p>This is part of a series of light reading points-of-view to help foster opinion on wide ranging technology topics, and maybe throw in some education along the way. In this series we are looking to provide some insight into the increasingly topical area of workload abstraction. As always, please feel free to comment and get in touch!&lt;/p>
&lt;h1 id="how-virtualization-was-just-the-first-step">How virtualization was just the first step&lt;/h1>
&lt;p>So we all know where all this virtualization came from, right? It’s a common thought that the sole business case for virtualization was derived from the inefficient use of existing hardware resources, and of course this is part of the story. But the unsung hero of virtualization was the usage of a simplified set of resources from the hardware abstraction layer. This meant that when an application was running in a virtual machine there was a good chance that problems in the operating system were down to an exhausted resource or poor configuration, not down to a bad driver or a kernel fault. The combination of vendor testing and almost instant worldwide feedback created an ecosystem where any significant problems were either removed before release or patched before you had a chance to download it anyway! Not all problems were eradicated, but the reduction in variants at the hypervisor level created a far more standard environment in which operating systems and applications could live in relative harmony.&lt;/p></description></item></channel></rss>