<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HAL on glennaugustus.com</title><link>https://glennaugustus.com/tags/hal/</link><description>Recent content in HAL on glennaugustus.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 27 Jul 2015 17:40:02 +0000</lastBuildDate><atom:link href="https://glennaugustus.com/tags/hal/index.xml" rel="self" type="application/rss+xml"/><item><title>Compute Workload Abstraction - Part 2, or Virtualization is dead, long live Virtualization!</title><link>https://glennaugustus.com/post/compute-workload-abstraction-part-2-virtualization-is-dead-long-live-virtualization/</link><pubDate>Mon, 27 Jul 2015 17:40:02 +0000</pubDate><guid>https://glennaugustus.com/post/compute-workload-abstraction-part-2-virtualization-is-dead-long-live-virtualization/</guid><description>&lt;p>This is part two of a series exploring the topic of compute workload abstraction. In &lt;a href="https://glennaugustus.com/post/compute-workload-abstraction-part-1-or-one-hal-of-a-story/">part one&lt;/a> we looked at the unsung hero in virtualization, the HAL, and in this part we dive a little deeper and scratch the surface on the potential benefits for applications.&lt;/p>
&lt;h2 id="is-traditional-virtualization-dead-then">Is traditional virtualization dead, then?&lt;/h2>
&lt;p>We ended part one asking if containers are a traditional virtualization killer, and in my view they are both complementary and competitive. Sure, there will be some ground conceded, but it simply complies with the evolutionary process of what I call the &lt;em>absorption of differentiation into expectation&lt;/em>.&lt;/p></description></item></channel></rss>